<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0">
   <modelVersion>4.0.0</modelVersion>
   <groupId>fr.rezzo.tapestry</groupId>
   <artifactId>pizzaJava</artifactId>
   <version>1.0-SNAPSHOT</version>
   <packaging>war</packaging>
   <name>Gestionnaire de pizza</name>

   <dependencies>

      <dependency>
         <groupId>org.apache.tapestry</groupId>
         <artifactId>tapestry-core</artifactId>
         <version>${tapestry-release-version}</version>
      </dependency>

      <dependency>
         <groupId>org.apache.tapestry</groupId>
         <artifactId>tapestry-hibernate</artifactId>
         <version>${tapestry-release-version}</version>
      </dependency>

      <dependency>
         <groupId>org.apache.tapestry</groupId>
         <artifactId>tapestry-ioc</artifactId>
         <version>${tapestry-release-version}</version>
      </dependency>
      <dependency>
          <groupId>org.apache.tapestry</groupId>
          <artifactId>t5c-contrib</artifactId>
          <version>0.5.13</version>
      </dependency>
      <dependency>
          <groupId>org.apache.tapestry</groupId>
          <artifactId>t5c-commons</artifactId>
          <version>0.5.13</version>
      </dependency>

      <!-- A dependency on either JUnit or TestNG is required, or the surefire plugin (which runs the tests)
will fail, preventing Maven from packaging the WAR. Tapestry includes a large number
of testing facilities designed for use with TestNG (http://testng.org/), so it's recommended. -->
      <dependency>
         <groupId>org.testng</groupId>
         <artifactId>testng</artifactId>
         <version>5.1</version>
         <classifier>jdk15</classifier>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-core</artifactId>
         <version>3.3.1.GA</version>
      </dependency>

      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-annotations</artifactId>
         <version>3.4.0.GA</version>
      </dependency>

      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-c3p0</artifactId>
         <version>3.3.1.GA</version>
      </dependency>

      <dependency>
         <groupId>postgresql</groupId>
         <artifactId>postgresql</artifactId>
         <version>8.3-603.jdbc4</version>
      </dependency>

      <dependency>
         <groupId>geronimo-spec</groupId>
         <artifactId>geronimo-spec-jta</artifactId>
         <version>1.0-M1</version>
      </dependency>

      <dependency>
         <groupId>javax.servlet</groupId>
         <artifactId>servlet-api</artifactId>
         <version>2.4</version>
      </dependency>

   </dependencies>

   <build>
      <finalName>pizzaJava</finalName>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
               <source>1.5</source>
               <target>1.5</target>
               <optimize>true</optimize>
            </configuration>
         </plugin>

         <!-- Run the application using "mvn jetty:run" -->
         <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>maven-jetty-plugin</artifactId>
            <version>6.1.9</version>
            <configuration>
               <!-- Log to the console. -->
               <requestLog implementation="org.mortbay.jetty.NCSARequestLog">
                  <!-- This doesn't do anything for Jetty, but is a workaround for a Maven bug
           that prevents the requestLog from being set. -->
                  <append>true</append>
               </requestLog>
               <connectors>
                  <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                     <port>8080</port>
                  </connector>
               </connectors>
               <scanIntervalSeconds>10</scanIntervalSeconds>
            </configuration>
         </plugin>


         <!-- This changes the WAR file packaging so that what would normally go into WEB-INF/classes
  is instead packaged as WEB-INF/lib/pizzaJava.jar.  This is necessary for Tapestry
  to be able to search for page and component classes at startup. Only
  certain application servers require this configuration, please see the documentation
  at the Tapestry 5 project page (http://tapestry.apache.org/tapestry5/). -->

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
               <archiveClasses>true</archiveClasses>
            </configuration>
         </plugin>
      </plugins>
   </build>

   <reporting>

      <!-- Adds a report detailing the components, mixins and base classes defined by this module. -->
      <plugins>
         <plugin>
            <groupId>org.apache.tapestry</groupId>
            <artifactId>tapestry-component-report</artifactId>
            <version>${tapestry-release-version}</version>
            <configuration>
               <rootPackage>fr.rezzo.tapestry</rootPackage>
            </configuration>
         </plugin>
      </plugins>
   </reporting>

   <repositories>
      <!-- This can be commented out when the tapestry-release-version is a not a snapshot.
The non-snapshot Tapestry artifacts are distributed through the central
repository at ibiblio.     -->
      <repository>
         <id>tapestry-snapshots</id>
         <url>http://tapestry.formos.com/maven-snapshot-repository/</url>
      </repository>
      <repository>
         <id>t5components</id>
         <name>T5Components Maven Repository</name>
         <url>http://87.193.218.134:8080/t5components/maven-repository</url>
      </repository>
      <repository>
         <id>central</id>
         <url>http://repo1.maven.org/maven2</url>
      </repository>
      <repository>
         <id>apache.snapshots</id>
         <url>http://people.apache.org/maven-snapshot-repository</url>
      </repository>
      <repository>
         <id>ibiblio</id>
         <url>http://www.ibiblio.org/maven/mule/dependencies/</url>
      </repository>
      <repository>
         <id>codehaus.snapshots</id>
         <url>http://snapshots.repository.codehaus.org/</url>
      </repository>
      <repository>
         <id>OpenQA_Release</id>
         <name>OpenQA Release Repository</name>
         <url>http://archiva.openqa.org/repository/releases/</url>
      </repository>
      <repository>
         <id>jboss</id>
         <name>jboss</name>
         <url>http://repository.jboss.org/maven2</url>
      </repository>
   </repositories>
   <pluginRepositories>
      <!-- As above, this can be commented out when access to the snapshot version
of a Tapestry Maven plugin is not required.   -->
      <pluginRepository>
         <id>tapestry-snapshots</id>
         <url>http://tapestry.formos.com/maven-snapshot-repository/</url>
      </pluginRepository>
   </pluginRepositories>

   <properties>
      <tapestry-release-version>5.0.15</tapestry-release-version>
   </properties>
</project>
